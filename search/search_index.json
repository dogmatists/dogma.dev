{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Dogma \u00b6 Here be dragons This is a semi-public, pre-alpha, work-in-progress project. Caveat utilitor: Assume nothing works, and you may be pleasantly surprised; and when it breaks, you get to keep both pieces. This project is presently at an early design and proof-of-concept stage. It is unlikely to be particularly useful as yet to anyone but its authors. If you are interested in the project, you can keep tabs on development at GitHub and follow the author on Twitter for project announcements. Installation \u00b6 C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies: dogma: ^0.0.0 Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Zig git clone https://github.com/dogmatists/dogma.zig.git For more detailed instructions, see the Installation chapter. Usage \u00b6 C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Zig const dogma = @import ( \"dogma\" ); For more detailed instructions, see the Getting Started chapter.","title":"Introduction"},{"location":"index.html#dogma","text":"Here be dragons This is a semi-public, pre-alpha, work-in-progress project. Caveat utilitor: Assume nothing works, and you may be pleasantly surprised; and when it breaks, you get to keep both pieces. This project is presently at an early design and proof-of-concept stage. It is unlikely to be particularly useful as yet to anyone but its authors. If you are interested in the project, you can keep tabs on development at GitHub and follow the author on Twitter for project announcements.","title":"Dogma"},{"location":"index.html#installation","text":"C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies: dogma: ^0.0.0 Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Zig git clone https://github.com/dogmatists/dogma.zig.git For more detailed instructions, see the Installation chapter.","title":"Installation"},{"location":"index.html#usage","text":"C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Zig const dogma = @import ( \"dogma\" ); For more detailed instructions, see the Getting Started chapter.","title":"Usage"},{"location":"Angle.html","text":"Angle class \u00b6 Summary \u00b6 Language Type Symbol C struct Angle C++ struct dogma::Angle Dart class Angle Protobuf message dogma.Angle Python class dogma.Angle Ruby class Dogma::Angle Zig struct dogma.Angle Description \u00b6 Angles are represented using radians , but can be constructed from radians, degrees , or turns . Constants \u00b6 Constructor \u00b6 From degrees \u00b6 C AngleFromDegrees ( 180 ) C++ Angle :: from_degrees ( 180 ) Dart Angle . fromDegrees ( 180 ) Python Angle ( degrees = 180 ) Ruby Angle . new ( degrees : 180 ) Zig Angle . fromDegrees ( 180 ) From radians \u00b6 C AngleFromRadians ( M_PI ) C++ Angle :: from_radians ( M_PI ) Dart Angle . fromRadians ( math . pi ) Python Angle ( radians = math . pi ) Ruby Angle . new ( radians : Math :: PI ) Zig Angle . fromRadians ( std . math . pi ) From turns \u00b6 C AngleFromTurns ( 0.5 ) C++ Angle :: from_turns ( 0.5 ) Dart Angle . fromTurns ( 0.5 ) Python Angle ( turns = 0.5 ) Ruby Angle . new ( turns : 0 . 5 ) Zig Angle . fromTurns ( 0.5 ) Properties \u00b6 degrees \u00b6 C AngleToDegrees ( angle ) C++ angle . degrees () Dart angle . degrees Python angle . degrees Ruby angle . degrees Zig angle . degrees () radians \u00b6 C AngleToRadians ( angle ) C++ angle . radians () Dart angle . radians Python angle . radians Ruby angle . radians Zig angle . radians () turns \u00b6 C AngleToTurns ( angle ) C++ angle . turns () Dart angle . turns Python angle . turns Ruby angle . turns Zig angle . turns () Methods \u00b6","title":"Angle"},{"location":"Angle.html#angle-class","text":"","title":"Angle class"},{"location":"Angle.html#summary","text":"Language Type Symbol C struct Angle C++ struct dogma::Angle Dart class Angle Protobuf message dogma.Angle Python class dogma.Angle Ruby class Dogma::Angle Zig struct dogma.Angle","title":"Summary"},{"location":"Angle.html#description","text":"Angles are represented using radians , but can be constructed from radians, degrees , or turns .","title":"Description"},{"location":"Angle.html#constants","text":"","title":"Constants"},{"location":"Angle.html#constructor","text":"","title":"Constructor"},{"location":"Angle.html#from-degrees","text":"C AngleFromDegrees ( 180 ) C++ Angle :: from_degrees ( 180 ) Dart Angle . fromDegrees ( 180 ) Python Angle ( degrees = 180 ) Ruby Angle . new ( degrees : 180 ) Zig Angle . fromDegrees ( 180 )","title":"From degrees"},{"location":"Angle.html#from-radians","text":"C AngleFromRadians ( M_PI ) C++ Angle :: from_radians ( M_PI ) Dart Angle . fromRadians ( math . pi ) Python Angle ( radians = math . pi ) Ruby Angle . new ( radians : Math :: PI ) Zig Angle . fromRadians ( std . math . pi )","title":"From radians"},{"location":"Angle.html#from-turns","text":"C AngleFromTurns ( 0.5 ) C++ Angle :: from_turns ( 0.5 ) Dart Angle . fromTurns ( 0.5 ) Python Angle ( turns = 0.5 ) Ruby Angle . new ( turns : 0 . 5 ) Zig Angle . fromTurns ( 0.5 )","title":"From turns"},{"location":"Angle.html#properties","text":"","title":"Properties"},{"location":"Angle.html#degrees","text":"C AngleToDegrees ( angle ) C++ angle . degrees () Dart angle . degrees Python angle . degrees Ruby angle . degrees Zig angle . degrees ()","title":"degrees"},{"location":"Angle.html#radians","text":"C AngleToRadians ( angle ) C++ angle . radians () Dart angle . radians Python angle . radians Ruby angle . radians Zig angle . radians ()","title":"radians"},{"location":"Angle.html#turns","text":"C AngleToTurns ( angle ) C++ angle . turns () Dart angle . turns Python angle . turns Ruby angle . turns Zig angle . turns ()","title":"turns"},{"location":"Angle.html#methods","text":"","title":"Methods"},{"location":"Latitude.html","text":"Latitude class \u00b6 Summary \u00b6 Language Type Symbol C struct Latitude C++ struct dogma::Latitude Dart class Latitude Protobuf message dogma.Latitude Python class dogma.Latitude Ruby class Dogma::Latitude Zig struct dogma.Latitude Description \u00b6 Constants \u00b6 MAX_DEGREES \u00b6 C C++ Dart Python Ruby Zig MIN_DEGREES \u00b6 C C++ Dart Python Ruby Zig Constructor \u00b6 C Latitude ( 90 ) C++ Latitude { 90 } Dart Latitude ( 90 ) Python Latitude ( 90 ) Ruby Latitude . new ( 90 ) Zig Latitude . init ( 90 ) Properties \u00b6 Methods \u00b6","title":"Latitude"},{"location":"Latitude.html#latitude-class","text":"","title":"Latitude class"},{"location":"Latitude.html#summary","text":"Language Type Symbol C struct Latitude C++ struct dogma::Latitude Dart class Latitude Protobuf message dogma.Latitude Python class dogma.Latitude Ruby class Dogma::Latitude Zig struct dogma.Latitude","title":"Summary"},{"location":"Latitude.html#description","text":"","title":"Description"},{"location":"Latitude.html#constants","text":"","title":"Constants"},{"location":"Latitude.html#max_degrees","text":"C C++ Dart Python Ruby Zig","title":"MAX_DEGREES"},{"location":"Latitude.html#min_degrees","text":"C C++ Dart Python Ruby Zig","title":"MIN_DEGREES"},{"location":"Latitude.html#constructor","text":"C Latitude ( 90 ) C++ Latitude { 90 } Dart Latitude ( 90 ) Python Latitude ( 90 ) Ruby Latitude . new ( 90 ) Zig Latitude . init ( 90 )","title":"Constructor"},{"location":"Latitude.html#properties","text":"","title":"Properties"},{"location":"Latitude.html#methods","text":"","title":"Methods"},{"location":"Longitude.html","text":"Longitude class \u00b6 Summary \u00b6 Language Type Symbol C struct Longitude C++ struct dogma::Longitude Dart class Longitude Protobuf message dogma.Longitude Python class dogma.Longitude Ruby class Dogma::Longitude Zig struct dogma.Longitude Description \u00b6 Constants \u00b6 MAX_DEGREES \u00b6 C C++ Dart Python Ruby Zig MIN_DEGREES \u00b6 C C++ Dart Python Ruby Zig Constructor \u00b6 C Longitude ( 180 ) C++ Longitude { 180 } Dart Longitude ( 180 ) Python Longitude ( 180 ) Ruby Longitude . new ( 180 ) Zig Longitude . init ( 180 ) Properties \u00b6 Methods \u00b6","title":"Longitude"},{"location":"Longitude.html#longitude-class","text":"","title":"Longitude class"},{"location":"Longitude.html#summary","text":"Language Type Symbol C struct Longitude C++ struct dogma::Longitude Dart class Longitude Protobuf message dogma.Longitude Python class dogma.Longitude Ruby class Dogma::Longitude Zig struct dogma.Longitude","title":"Summary"},{"location":"Longitude.html#description","text":"","title":"Description"},{"location":"Longitude.html#constants","text":"","title":"Constants"},{"location":"Longitude.html#max_degrees","text":"C C++ Dart Python Ruby Zig","title":"MAX_DEGREES"},{"location":"Longitude.html#min_degrees","text":"C C++ Dart Python Ruby Zig","title":"MIN_DEGREES"},{"location":"Longitude.html#constructor","text":"C Longitude ( 180 ) C++ Longitude { 180 } Dart Longitude ( 180 ) Python Longitude ( 180 ) Ruby Longitude . new ( 180 ) Zig Longitude . init ( 180 )","title":"Constructor"},{"location":"Longitude.html#properties","text":"","title":"Properties"},{"location":"Longitude.html#methods","text":"","title":"Methods"},{"location":"concepts.html","text":"Concepts \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Concepts"},{"location":"concepts.html#concepts","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Concepts"},{"location":"faq.html","text":"Frequently Asked Questions \u00b6","title":"FAQs"},{"location":"faq.html#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"glossary.html","text":"Glossary \u00b6 0-9 \u00b6 A \u00b6 angle \u00b6 B \u00b6 C \u00b6 D \u00b6 degree \u00b6 E \u00b6 F \u00b6 G \u00b6 H \u00b6 I \u00b6 J \u00b6 K \u00b6 L \u00b6 M \u00b6 N \u00b6 O \u00b6 P \u00b6 Q \u00b6 R \u00b6 radian \u00b6 S \u00b6 T \u00b6 turn \u00b6 U \u00b6 V \u00b6 W \u00b6 X \u00b6 Y \u00b6 Z \u00b6","title":"Glossary"},{"location":"glossary.html#glossary","text":"","title":"Glossary"},{"location":"glossary.html#0-9","text":"","title":"0-9"},{"location":"glossary.html#a","text":"","title":"A"},{"location":"glossary.html#angle","text":"","title":"angle"},{"location":"glossary.html#b","text":"","title":"B"},{"location":"glossary.html#c","text":"","title":"C"},{"location":"glossary.html#d","text":"","title":"D"},{"location":"glossary.html#degree","text":"","title":"degree"},{"location":"glossary.html#e","text":"","title":"E"},{"location":"glossary.html#f","text":"","title":"F"},{"location":"glossary.html#g","text":"","title":"G"},{"location":"glossary.html#h","text":"","title":"H"},{"location":"glossary.html#i","text":"","title":"I"},{"location":"glossary.html#j","text":"","title":"J"},{"location":"glossary.html#k","text":"","title":"K"},{"location":"glossary.html#l","text":"","title":"L"},{"location":"glossary.html#m","text":"","title":"M"},{"location":"glossary.html#n","text":"","title":"N"},{"location":"glossary.html#o","text":"","title":"O"},{"location":"glossary.html#p","text":"","title":"P"},{"location":"glossary.html#q","text":"","title":"Q"},{"location":"glossary.html#r","text":"","title":"R"},{"location":"glossary.html#radian","text":"","title":"radian"},{"location":"glossary.html#s","text":"","title":"S"},{"location":"glossary.html#t","text":"","title":"T"},{"location":"glossary.html#turn","text":"","title":"turn"},{"location":"glossary.html#u","text":"","title":"U"},{"location":"glossary.html#v","text":"","title":"V"},{"location":"glossary.html#w","text":"","title":"W"},{"location":"glossary.html#x","text":"","title":"X"},{"location":"glossary.html#y","text":"","title":"Y"},{"location":"glossary.html#z","text":"","title":"Z"},{"location":"history.html","text":"Release Notes \u00b6 0.1.0 (2020-07-xx) \u00b6 Added the Angle , Latitude , and Longitude classes","title":"Release Notes"},{"location":"history.html#release-notes","text":"","title":"Release Notes"},{"location":"history.html#010-2020-07-xx","text":"Added the Angle , Latitude , and Longitude classes","title":"0.1.0 (2020-07-xx)"},{"location":"install.html","text":"Installation \u00b6 Summary \u00b6 Language Command C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies:\u21b5 dogma: ^0.0.0 Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Zig git clone https://github.com/dogmatists/dogma.zig.git Installing from Git \u00b6 C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart git clone https://github.com/dogmatists/dogma.dart.git Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python git clone https://github.com/dogmatists/dogma.py.git Ruby git clone https://github.com/dogmatists/dogma.rb.git Zig git clone https://github.com/dogmatists/dogma.zig.git","title":"Installation"},{"location":"install.html#installation","text":"","title":"Installation"},{"location":"install.html#summary","text":"Language Command C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies:\u21b5 dogma: ^0.0.0 Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Zig git clone https://github.com/dogmatists/dogma.zig.git","title":"Summary"},{"location":"install.html#installing-from-git","text":"C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart git clone https://github.com/dogmatists/dogma.dart.git Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python git clone https://github.com/dogmatists/dogma.py.git Ruby git clone https://github.com/dogmatists/dogma.rb.git Zig git clone https://github.com/dogmatists/dogma.zig.git","title":"Installing from Git"},{"location":"learn.html","text":"Tutorials \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Tutorials"},{"location":"learn.html#tutorials","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Tutorials"},{"location":"license.html","text":"License \u00b6 The project in its entirety, including all source code as well as this manual, is 100% free and unencumbered public domain software. This is free and unencumbered software released into the public domain. Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means. In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For more information, please refer to http://unlicense.org/","title":"License"},{"location":"license.html#license","text":"The project in its entirety, including all source code as well as this manual, is 100% free and unencumbered public domain software. This is free and unencumbered software released into the public domain. Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means. In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For more information, please refer to http://unlicense.org/","title":"License"},{"location":"start.html","text":"Getting Started \u00b6 Summary \u00b6 Language Code C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart'; Protobuf import \"dogma.proto\"; Python import dogma Ruby require 'dogma' Zig const dogma = @import(\"dogma\"); Loading the library \u00b6 C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Zig const dogma = @import ( \"dogma\" ); Checking the library version \u00b6 C printf ( \"Dogma for C %d.%d.%d \\n \" , DOGMA_VERSION_MAJOR , DOGMA_VERSION_MINOR , DOGMA_VERSION_PATCH ); C++ std :: printf ( \"Dogma for C++ %d.%d.%d \\n \" , dogma :: version :: major , dogma :: version :: minor , dogma :: version :: patch ); Dart // TODO Python # TODO Ruby # TODO Zig // TODO Naming conventions \u00b6","title":"Getting Started"},{"location":"start.html#getting-started","text":"","title":"Getting Started"},{"location":"start.html#summary","text":"Language Code C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart'; Protobuf import \"dogma.proto\"; Python import dogma Ruby require 'dogma' Zig const dogma = @import(\"dogma\");","title":"Summary"},{"location":"start.html#loading-the-library","text":"C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Zig const dogma = @import ( \"dogma\" );","title":"Loading the library"},{"location":"start.html#checking-the-library-version","text":"C printf ( \"Dogma for C %d.%d.%d \\n \" , DOGMA_VERSION_MAJOR , DOGMA_VERSION_MINOR , DOGMA_VERSION_PATCH ); C++ std :: printf ( \"Dogma for C++ %d.%d.%d \\n \" , dogma :: version :: major , dogma :: version :: minor , dogma :: version :: patch ); Dart // TODO Python # TODO Ruby # TODO Zig // TODO","title":"Checking the library version"},{"location":"start.html#naming-conventions","text":"","title":"Naming conventions"}]}