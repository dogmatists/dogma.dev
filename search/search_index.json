{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Dogma \u00b6 Here be dragons This is a semi-public, pre-alpha, work-in-progress project. Caveat utilitor: Assume nothing works, and you may be pleasantly surprised; and when it breaks, you get to keep both pieces. This project is presently at an early design and proof-of-concept stage. It is unlikely to be particularly useful as yet to anyone but its authors. If you are interested in the project, you can keep tabs on development at GitHub and follow the author on Twitter for project announcements. Installation \u00b6 C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies : dogma : ^0.0.0 Go go get github.com/dogmatists/dogma.go/dogma Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Rust cargo install dogma Zig git clone https://github.com/dogmatists/dogma.zig.git For more detailed instructions, see the Installation chapter. Usage \u00b6 C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Go import \"github.com/dogmatists/dogma.go/dogma\" Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Rust extern crate dogma ; Zig const dogma = @import ( \"dogma\" ); For more detailed instructions, see the Getting Started chapter.","title":"Introduction"},{"location":"index.html#dogma","text":"Here be dragons This is a semi-public, pre-alpha, work-in-progress project. Caveat utilitor: Assume nothing works, and you may be pleasantly surprised; and when it breaks, you get to keep both pieces. This project is presently at an early design and proof-of-concept stage. It is unlikely to be particularly useful as yet to anyone but its authors. If you are interested in the project, you can keep tabs on development at GitHub and follow the author on Twitter for project announcements.","title":"Dogma"},{"location":"index.html#installation","text":"C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies : dogma : ^0.0.0 Go go get github.com/dogmatists/dogma.go/dogma Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Rust cargo install dogma Zig git clone https://github.com/dogmatists/dogma.zig.git For more detailed instructions, see the Installation chapter.","title":"Installation"},{"location":"index.html#usage","text":"C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Go import \"github.com/dogmatists/dogma.go/dogma\" Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Rust extern crate dogma ; Zig const dogma = @import ( \"dogma\" ); For more detailed instructions, see the Getting Started chapter.","title":"Usage"},{"location":"Angle.html","text":"Angle class \u00b6 Diagram \u00b6 classDiagram class Angle { -double radians +radians() double +degrees() double +turns() double } Summary \u00b6 Language Type Symbol C struct Angle C++ struct dogma::Angle Dart class Angle Go struct dogma.Angle Protobuf message dogma.Angle Python class dogma.Angle Ruby class Dogma::Angle Rust struct dogma::Angle Zig struct dogma.Angle Description \u00b6 Angles are represented using radians , but can be constructed from radians, degrees , or turns . Constants \u00b6 Constructor \u00b6 From degrees \u00b6 C AngleFromDegrees ( 180 ) C++ Angle :: from_degrees ( 180 ) Dart Angle . fromDegrees ( 180 ) Go AngleFromDegrees ( 180 ) Python Angle ( degrees = 180 ) Ruby Angle . new ( degrees : 180 ) Rust Angle :: from_degrees ( 180 ) Zig Angle . fromDegrees ( 180 ) From radians \u00b6 C AngleFromRadians ( M_PI ) C++ Angle :: from_radians ( M_PI ) Dart Angle . fromRadians ( math . pi ) Go AngleFromRadians ( math . Pi ) Python Angle ( radians = math . pi ) Ruby Angle . new ( radians : Math :: PI ) Rust Angle :: from_radians ( std :: f64 :: consts :: PI ) Zig Angle . fromRadians ( std . math . pi ) From turns \u00b6 C AngleFromTurns ( 0.5 ) C++ Angle :: from_turns ( 0.5 ) Dart Angle . fromTurns ( 0.5 ) Go AngleFromTurns ( 0.5 ) Python Angle ( turns = 0.5 ) Ruby Angle . new ( turns : 0 . 5 ) Rust Angle :: from_turns ( 0.5 ) Zig Angle . fromTurns ( 0.5 ) Properties \u00b6 degrees \u00b6 C AngleToDegrees ( angle ) C++ angle . degrees () Dart angle . degrees Go angle . Degrees () Python angle . degrees Ruby angle . degrees Rust angle . degrees () Zig angle . degrees () radians \u00b6 C AngleToRadians ( angle ) C++ angle . radians () Dart angle . radians Go angle . Radians () Python angle . radians Ruby angle . radians Rust angle . radians () Zig angle . radians () turns \u00b6 C AngleToTurns ( angle ) C++ angle . turns () Dart angle . turns Go angle . Turns () Python angle . turns Ruby angle . turns Rust angle . turns () Zig angle . turns () Methods \u00b6 Schema \u00b6 Flat Buffers struct Angle { radians : double ; } Joi Joi . number () JSON Schema { \"type\" : \"number\" } OWL dogma: Angle a owl: DatatypeProperty ; rdfs: range xsd: double . Protocol Buffers message Angle { double radians = 1 ; } SQL angle DOUBLE PRECISION -- in radians XML Schema <xs:simpleType name= \"Angle\" > <xs:restriction base= \"xs:double\" /> </xs:simpleType> Serialization \u00b6 JSON 0.0 // 0 \u00b0 in radians 1.5707963267948966 // 90 \u00b0 in radians ( 0.5 \u03c0) 3.141592653589793 // 180 \u00b0 in radians (\u03c0) 4.71238898038469 // 270 \u00b0 in radians ( 1.5 \u03c0) 6.283185307179586 // 360 \u00b0 in radians ( 2 \u03c0) JSON-LD // TODO XML <!-- TODO --> FAQs \u00b6 References \u00b6 en.wikipedia.org/wiki/Angle en.wikipedia.org/wiki/Degree_symbol mathworld.wolfram.com/Angle.html","title":"Angle"},{"location":"Angle.html#angle-class","text":"","title":"Angle class"},{"location":"Angle.html#diagram","text":"classDiagram class Angle { -double radians +radians() double +degrees() double +turns() double }","title":"Diagram"},{"location":"Angle.html#summary","text":"Language Type Symbol C struct Angle C++ struct dogma::Angle Dart class Angle Go struct dogma.Angle Protobuf message dogma.Angle Python class dogma.Angle Ruby class Dogma::Angle Rust struct dogma::Angle Zig struct dogma.Angle","title":"Summary"},{"location":"Angle.html#description","text":"Angles are represented using radians , but can be constructed from radians, degrees , or turns .","title":"Description"},{"location":"Angle.html#constants","text":"","title":"Constants"},{"location":"Angle.html#constructor","text":"","title":"Constructor"},{"location":"Angle.html#from-degrees","text":"C AngleFromDegrees ( 180 ) C++ Angle :: from_degrees ( 180 ) Dart Angle . fromDegrees ( 180 ) Go AngleFromDegrees ( 180 ) Python Angle ( degrees = 180 ) Ruby Angle . new ( degrees : 180 ) Rust Angle :: from_degrees ( 180 ) Zig Angle . fromDegrees ( 180 )","title":"From degrees"},{"location":"Angle.html#from-radians","text":"C AngleFromRadians ( M_PI ) C++ Angle :: from_radians ( M_PI ) Dart Angle . fromRadians ( math . pi ) Go AngleFromRadians ( math . Pi ) Python Angle ( radians = math . pi ) Ruby Angle . new ( radians : Math :: PI ) Rust Angle :: from_radians ( std :: f64 :: consts :: PI ) Zig Angle . fromRadians ( std . math . pi )","title":"From radians"},{"location":"Angle.html#from-turns","text":"C AngleFromTurns ( 0.5 ) C++ Angle :: from_turns ( 0.5 ) Dart Angle . fromTurns ( 0.5 ) Go AngleFromTurns ( 0.5 ) Python Angle ( turns = 0.5 ) Ruby Angle . new ( turns : 0 . 5 ) Rust Angle :: from_turns ( 0.5 ) Zig Angle . fromTurns ( 0.5 )","title":"From turns"},{"location":"Angle.html#properties","text":"","title":"Properties"},{"location":"Angle.html#degrees","text":"C AngleToDegrees ( angle ) C++ angle . degrees () Dart angle . degrees Go angle . Degrees () Python angle . degrees Ruby angle . degrees Rust angle . degrees () Zig angle . degrees ()","title":"degrees"},{"location":"Angle.html#radians","text":"C AngleToRadians ( angle ) C++ angle . radians () Dart angle . radians Go angle . Radians () Python angle . radians Ruby angle . radians Rust angle . radians () Zig angle . radians ()","title":"radians"},{"location":"Angle.html#turns","text":"C AngleToTurns ( angle ) C++ angle . turns () Dart angle . turns Go angle . Turns () Python angle . turns Ruby angle . turns Rust angle . turns () Zig angle . turns ()","title":"turns"},{"location":"Angle.html#methods","text":"","title":"Methods"},{"location":"Angle.html#schema","text":"Flat Buffers struct Angle { radians : double ; } Joi Joi . number () JSON Schema { \"type\" : \"number\" } OWL dogma: Angle a owl: DatatypeProperty ; rdfs: range xsd: double . Protocol Buffers message Angle { double radians = 1 ; } SQL angle DOUBLE PRECISION -- in radians XML Schema <xs:simpleType name= \"Angle\" > <xs:restriction base= \"xs:double\" /> </xs:simpleType>","title":"Schema"},{"location":"Angle.html#serialization","text":"JSON 0.0 // 0 \u00b0 in radians 1.5707963267948966 // 90 \u00b0 in radians ( 0.5 \u03c0) 3.141592653589793 // 180 \u00b0 in radians (\u03c0) 4.71238898038469 // 270 \u00b0 in radians ( 1.5 \u03c0) 6.283185307179586 // 360 \u00b0 in radians ( 2 \u03c0) JSON-LD // TODO XML <!-- TODO -->","title":"Serialization"},{"location":"Angle.html#faqs","text":"","title":"FAQs"},{"location":"Angle.html#references","text":"en.wikipedia.org/wiki/Angle en.wikipedia.org/wiki/Degree_symbol mathworld.wolfram.com/Angle.html","title":"References"},{"location":"Latitude.html","text":"Latitude class \u00b6 Diagram \u00b6 classDiagram class Angle { -double radians +radians() double +degrees() double +turns() double } class Latitude Latitude --|> Angle : extends Summary \u00b6 Language Type Symbol C struct Latitude C++ struct dogma::Latitude Dart class Latitude Go struct dogma.Latitude Protobuf message dogma.Latitude Python class dogma.Latitude Ruby class Dogma::Latitude Rust struct dogma::Latitude Zig struct dogma.Latitude Description \u00b6 Constants \u00b6 MAX_DEGREES \u00b6 C C++ Dart Go dogma . MaxLatitudeDegrees // 90 Python Ruby Rust // TODO Zig MIN_DEGREES \u00b6 C C++ Dart Go dogma . MinLatitudeDegrees // -90 Python Ruby Rust // TODO Zig Constructor \u00b6 C Latitude ( 27.9881 ) C++ Latitude { 27.9881 } Dart Latitude ( 27.9881 ) Go NewLatitude ( 27.9881 ) Python Latitude ( 27.9881 ) Ruby Latitude . new ( 27 . 9881 ) Rust Latitude :: new ( 27.9881 ) Zig Latitude . init ( 27.9881 ) Properties \u00b6 Methods \u00b6 Schema \u00b6 Flat Buffers struct Latitude { angle : Angle ; } Joi Joi . number (). min ( - 90 ). max ( 90 ) JSON Schema { \"type\" : \"number\" , \"minimum\" : -90 , \"maximum\" : 90 } OWL dogma: Latitude a owl: DatatypeProperty ; rdfs: range xsd: double . [] a owl: Restriction ; owl: onProperty dogma: Latitude ; owl: someValuesFrom [ a rdfs: Datatype ; owl: onDatatype xsd: double ; owl: withRestrictions ( [ xsd: minInclusive \"-90\" ^^ xsd:double ] [ xsd: maxInclusive \"90\" ^^ xsd:double ] ) ] . Protocol Buffers message Latitude { Angle angle = 1 ; } SQL latitude DOUBLE PRECISION -- in degrees from -90\u00b0 to 90\u00b0 XML Schema <xs:simpleType name= \"Latitude\" > <xs:restriction base= \"xs:double\" > <xs:minInclusive value= \"-90\" /> <xs:maxInclusive value= \"90\" /> </xs:restriction> </xs:simpleType> Serialization \u00b6 JSON 27.9881 // Latitude of Mt. Everest JSON-LD // TODO XML <!-- TODO --> FAQs \u00b6 References \u00b6 en.wikipedia.org/wiki/Latitude mathworld.wolfram.com/Latitude.html","title":"Latitude"},{"location":"Latitude.html#latitude-class","text":"","title":"Latitude class"},{"location":"Latitude.html#diagram","text":"classDiagram class Angle { -double radians +radians() double +degrees() double +turns() double } class Latitude Latitude --|> Angle : extends","title":"Diagram"},{"location":"Latitude.html#summary","text":"Language Type Symbol C struct Latitude C++ struct dogma::Latitude Dart class Latitude Go struct dogma.Latitude Protobuf message dogma.Latitude Python class dogma.Latitude Ruby class Dogma::Latitude Rust struct dogma::Latitude Zig struct dogma.Latitude","title":"Summary"},{"location":"Latitude.html#description","text":"","title":"Description"},{"location":"Latitude.html#constants","text":"","title":"Constants"},{"location":"Latitude.html#max_degrees","text":"C C++ Dart Go dogma . MaxLatitudeDegrees // 90 Python Ruby Rust // TODO Zig","title":"MAX_DEGREES"},{"location":"Latitude.html#min_degrees","text":"C C++ Dart Go dogma . MinLatitudeDegrees // -90 Python Ruby Rust // TODO Zig","title":"MIN_DEGREES"},{"location":"Latitude.html#constructor","text":"C Latitude ( 27.9881 ) C++ Latitude { 27.9881 } Dart Latitude ( 27.9881 ) Go NewLatitude ( 27.9881 ) Python Latitude ( 27.9881 ) Ruby Latitude . new ( 27 . 9881 ) Rust Latitude :: new ( 27.9881 ) Zig Latitude . init ( 27.9881 )","title":"Constructor"},{"location":"Latitude.html#properties","text":"","title":"Properties"},{"location":"Latitude.html#methods","text":"","title":"Methods"},{"location":"Latitude.html#schema","text":"Flat Buffers struct Latitude { angle : Angle ; } Joi Joi . number (). min ( - 90 ). max ( 90 ) JSON Schema { \"type\" : \"number\" , \"minimum\" : -90 , \"maximum\" : 90 } OWL dogma: Latitude a owl: DatatypeProperty ; rdfs: range xsd: double . [] a owl: Restriction ; owl: onProperty dogma: Latitude ; owl: someValuesFrom [ a rdfs: Datatype ; owl: onDatatype xsd: double ; owl: withRestrictions ( [ xsd: minInclusive \"-90\" ^^ xsd:double ] [ xsd: maxInclusive \"90\" ^^ xsd:double ] ) ] . Protocol Buffers message Latitude { Angle angle = 1 ; } SQL latitude DOUBLE PRECISION -- in degrees from -90\u00b0 to 90\u00b0 XML Schema <xs:simpleType name= \"Latitude\" > <xs:restriction base= \"xs:double\" > <xs:minInclusive value= \"-90\" /> <xs:maxInclusive value= \"90\" /> </xs:restriction> </xs:simpleType>","title":"Schema"},{"location":"Latitude.html#serialization","text":"JSON 27.9881 // Latitude of Mt. Everest JSON-LD // TODO XML <!-- TODO -->","title":"Serialization"},{"location":"Latitude.html#faqs","text":"","title":"FAQs"},{"location":"Latitude.html#references","text":"en.wikipedia.org/wiki/Latitude mathworld.wolfram.com/Latitude.html","title":"References"},{"location":"Location.html","text":"Location class \u00b6 Diagram \u00b6 classDiagram class Location { -Latitude latitude -Longitude longitude +latitude() Latitude +longitude() Longitude } class Latitude class Longitude Location --* Latitude : contains Location --* Longitude : contains Summary \u00b6 Language Type Symbol C struct Location C++ struct dogma::Location Dart class Location Go struct dogma.Location Protobuf message dogma.Location Python class dogma.Location Ruby class Dogma::Location Rust struct dogma::Location Zig struct dogma.Location Description \u00b6 Constants \u00b6 Constructor \u00b6 C Location ( 27.9881 , 86.9250 ) C++ Location { 27.9881 , 86.9250 } Dart Location ( 27.9881 , 86.9250 ) Go NewLocation ( 27.9881 , 86.9250 ) Python Location ( 27.9881 , 86.9250 ) Ruby Location . new ( 27 . 9881 , 86 . 9250 ) Rust Location :: new ( 27.9881 , 86.9250 ) Zig Location . init ( 27.9881 , 86.9250 ) Properties \u00b6 latitude \u00b6 longitude \u00b6 Methods \u00b6 Schema \u00b6 Flat Buffers struct Location { latitude : Latitude ; longitude : Longitude ; } Joi Joi . object (). keys ({ latitude : Joi . number (). min ( - 90 ). max ( 90 ). required (), longitude : Joi . number (). min ( - 180 ). max ( 180 ). required (), }) JSON Schema { \"type\" : \"object\" , \"properties\" : { \"latitude\" : { \"type\" : \"number\" , \"minimum\" : -90 , \"maximum\" : 90 }, \"longitude\" : { \"type\" : \"number\" , \"minimum\" : -180 , \"maximum\" : 180 } }, \"required\" : [ \"latitude\" , \"longitude\" ] } OWL # TODO Protocol Buffers message Location { Latitude latitude = 1 ; Longitude longitude = 2 ; } SQL latitude DOUBLE PRECISION , -- in degrees from -90\u00b0 to 90\u00b0 longitude DOUBLE PRECISION , -- in degrees from -180\u00b0 to 180\u00b0 XML Schema <xs:complexType name= \"Location\" > <xs:attribute name= \"latitude\" type= \"Latitude\" use= \"required\" /> <xs:attribute name= \"longitude\" type= \"Longitude\" use= \"required\" /> </xs:complexType> Serialization \u00b6 JSON { \"latitude\" : 27.9881 , \"longitude\" : 86.9250 } // Mt. Everest JSON-LD // TODO XML <location latitude= \"27.9881\" longitude= \"86.9250\" /> <!-- Mt. Everest --> FAQs \u00b6 References \u00b6 en.wikipedia.org/wiki/Location","title":"Location"},{"location":"Location.html#location-class","text":"","title":"Location class"},{"location":"Location.html#diagram","text":"classDiagram class Location { -Latitude latitude -Longitude longitude +latitude() Latitude +longitude() Longitude } class Latitude class Longitude Location --* Latitude : contains Location --* Longitude : contains","title":"Diagram"},{"location":"Location.html#summary","text":"Language Type Symbol C struct Location C++ struct dogma::Location Dart class Location Go struct dogma.Location Protobuf message dogma.Location Python class dogma.Location Ruby class Dogma::Location Rust struct dogma::Location Zig struct dogma.Location","title":"Summary"},{"location":"Location.html#description","text":"","title":"Description"},{"location":"Location.html#constants","text":"","title":"Constants"},{"location":"Location.html#constructor","text":"C Location ( 27.9881 , 86.9250 ) C++ Location { 27.9881 , 86.9250 } Dart Location ( 27.9881 , 86.9250 ) Go NewLocation ( 27.9881 , 86.9250 ) Python Location ( 27.9881 , 86.9250 ) Ruby Location . new ( 27 . 9881 , 86 . 9250 ) Rust Location :: new ( 27.9881 , 86.9250 ) Zig Location . init ( 27.9881 , 86.9250 )","title":"Constructor"},{"location":"Location.html#properties","text":"","title":"Properties"},{"location":"Location.html#latitude","text":"","title":"latitude"},{"location":"Location.html#longitude","text":"","title":"longitude"},{"location":"Location.html#methods","text":"","title":"Methods"},{"location":"Location.html#schema","text":"Flat Buffers struct Location { latitude : Latitude ; longitude : Longitude ; } Joi Joi . object (). keys ({ latitude : Joi . number (). min ( - 90 ). max ( 90 ). required (), longitude : Joi . number (). min ( - 180 ). max ( 180 ). required (), }) JSON Schema { \"type\" : \"object\" , \"properties\" : { \"latitude\" : { \"type\" : \"number\" , \"minimum\" : -90 , \"maximum\" : 90 }, \"longitude\" : { \"type\" : \"number\" , \"minimum\" : -180 , \"maximum\" : 180 } }, \"required\" : [ \"latitude\" , \"longitude\" ] } OWL # TODO Protocol Buffers message Location { Latitude latitude = 1 ; Longitude longitude = 2 ; } SQL latitude DOUBLE PRECISION , -- in degrees from -90\u00b0 to 90\u00b0 longitude DOUBLE PRECISION , -- in degrees from -180\u00b0 to 180\u00b0 XML Schema <xs:complexType name= \"Location\" > <xs:attribute name= \"latitude\" type= \"Latitude\" use= \"required\" /> <xs:attribute name= \"longitude\" type= \"Longitude\" use= \"required\" /> </xs:complexType>","title":"Schema"},{"location":"Location.html#serialization","text":"JSON { \"latitude\" : 27.9881 , \"longitude\" : 86.9250 } // Mt. Everest JSON-LD // TODO XML <location latitude= \"27.9881\" longitude= \"86.9250\" /> <!-- Mt. Everest -->","title":"Serialization"},{"location":"Location.html#faqs","text":"","title":"FAQs"},{"location":"Location.html#references","text":"en.wikipedia.org/wiki/Location","title":"References"},{"location":"Longitude.html","text":"Longitude class \u00b6 Diagram \u00b6 classDiagram class Angle { -double radians +radians() double +degrees() double +turns() double } class Longitude Longitude --|> Angle : extends Summary \u00b6 Language Type Symbol C struct Longitude C++ struct dogma::Longitude Dart class Longitude Go struct dogma.Longitude Protobuf message dogma.Longitude Python class dogma.Longitude Ruby class Dogma::Longitude Rust struct dogma::Longitude Zig struct dogma.Longitude Description \u00b6 Constants \u00b6 MAX_DEGREES \u00b6 C C++ Dart Go dogma . MaxLongitudeDegrees // 180 Python Ruby Rust // TODO Zig MIN_DEGREES \u00b6 C C++ Dart Go dogma . MinLongitudeDegrees // -180 Python Ruby Rust // TODO Zig Constructor \u00b6 C Longitude ( 86.9250 ) C++ Longitude { 86.9250 } Dart Longitude ( 86.9250 ) Go NewLongitude ( 86.9250 ) Python Longitude ( 86.9250 ) Ruby Longitude . new ( 86 . 9250 ) Rust Longitude :: new ( 86.9250 ) Zig Longitude . init ( 86.9250 ) Properties \u00b6 Methods \u00b6 Schema \u00b6 Flat Buffers struct Longitude { angle : Angle ; } Joi Joi . number (). min ( - 180 ). max ( 180 ) JSON Schema { \"type\" : \"number\" , \"minimum\" : -180 , \"maximum\" : 180 } OWL dogma: Longitude a owl: DatatypeProperty ; rdfs: range xsd: double . [] a owl: Restriction ; owl: onProperty dogma: Longitude ; owl: someValuesFrom [ a rdfs: Datatype ; owl: onDatatype xsd: double ; owl: withRestrictions ( [ xsd: minInclusive \"-180\" ^^ xsd:double ] [ xsd: maxInclusive \"180\" ^^ xsd:double ] ) ] . Protocol Buffers message Longitude { Angle angle = 1 ; } SQL longitude DOUBLE PRECISION -- in degrees from -180\u00b0 to 180\u00b0 XML Schema <xs:simpleType name= \"Longitude\" > <xs:restriction base= \"xs:double\" > <xs:minInclusive value= \"-180\" /> <xs:maxInclusive value= \"180\" /> </xs:restriction> </xs:simpleType> Serialization \u00b6 JSON 86.9250 // Longitude of Mt. Everest JSON-LD // TODO XML <!-- TODO --> FAQs \u00b6 References \u00b6 en.wikipedia.org/wiki/Longitude mathworld.wolfram.com/Longitude.html","title":"Longitude"},{"location":"Longitude.html#longitude-class","text":"","title":"Longitude class"},{"location":"Longitude.html#diagram","text":"classDiagram class Angle { -double radians +radians() double +degrees() double +turns() double } class Longitude Longitude --|> Angle : extends","title":"Diagram"},{"location":"Longitude.html#summary","text":"Language Type Symbol C struct Longitude C++ struct dogma::Longitude Dart class Longitude Go struct dogma.Longitude Protobuf message dogma.Longitude Python class dogma.Longitude Ruby class Dogma::Longitude Rust struct dogma::Longitude Zig struct dogma.Longitude","title":"Summary"},{"location":"Longitude.html#description","text":"","title":"Description"},{"location":"Longitude.html#constants","text":"","title":"Constants"},{"location":"Longitude.html#max_degrees","text":"C C++ Dart Go dogma . MaxLongitudeDegrees // 180 Python Ruby Rust // TODO Zig","title":"MAX_DEGREES"},{"location":"Longitude.html#min_degrees","text":"C C++ Dart Go dogma . MinLongitudeDegrees // -180 Python Ruby Rust // TODO Zig","title":"MIN_DEGREES"},{"location":"Longitude.html#constructor","text":"C Longitude ( 86.9250 ) C++ Longitude { 86.9250 } Dart Longitude ( 86.9250 ) Go NewLongitude ( 86.9250 ) Python Longitude ( 86.9250 ) Ruby Longitude . new ( 86 . 9250 ) Rust Longitude :: new ( 86.9250 ) Zig Longitude . init ( 86.9250 )","title":"Constructor"},{"location":"Longitude.html#properties","text":"","title":"Properties"},{"location":"Longitude.html#methods","text":"","title":"Methods"},{"location":"Longitude.html#schema","text":"Flat Buffers struct Longitude { angle : Angle ; } Joi Joi . number (). min ( - 180 ). max ( 180 ) JSON Schema { \"type\" : \"number\" , \"minimum\" : -180 , \"maximum\" : 180 } OWL dogma: Longitude a owl: DatatypeProperty ; rdfs: range xsd: double . [] a owl: Restriction ; owl: onProperty dogma: Longitude ; owl: someValuesFrom [ a rdfs: Datatype ; owl: onDatatype xsd: double ; owl: withRestrictions ( [ xsd: minInclusive \"-180\" ^^ xsd:double ] [ xsd: maxInclusive \"180\" ^^ xsd:double ] ) ] . Protocol Buffers message Longitude { Angle angle = 1 ; } SQL longitude DOUBLE PRECISION -- in degrees from -180\u00b0 to 180\u00b0 XML Schema <xs:simpleType name= \"Longitude\" > <xs:restriction base= \"xs:double\" > <xs:minInclusive value= \"-180\" /> <xs:maxInclusive value= \"180\" /> </xs:restriction> </xs:simpleType>","title":"Schema"},{"location":"Longitude.html#serialization","text":"JSON 86.9250 // Longitude of Mt. Everest JSON-LD // TODO XML <!-- TODO -->","title":"Serialization"},{"location":"Longitude.html#faqs","text":"","title":"FAQs"},{"location":"Longitude.html#references","text":"en.wikipedia.org/wiki/Longitude mathworld.wolfram.com/Longitude.html","title":"References"},{"location":"concepts.html","text":"Concepts \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Concepts"},{"location":"concepts.html#concepts","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Concepts"},{"location":"faq.html","text":"Frequently Asked Questions \u00b6","title":"FAQs"},{"location":"faq.html#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"glossary.html","text":"Glossary \u00b6 0-9 \u00b6 A \u00b6 angle \u00b6 B \u00b6 C \u00b6 D \u00b6 degree \u00b6 E \u00b6 F \u00b6 G \u00b6 H \u00b6 I \u00b6 J \u00b6 K \u00b6 L \u00b6 location \u00b6 M \u00b6 N \u00b6 O \u00b6 P \u00b6 Q \u00b6 R \u00b6 radian \u00b6 S \u00b6 T \u00b6 turn \u00b6 U \u00b6 V \u00b6 W \u00b6 X \u00b6 Y \u00b6 Z \u00b6","title":"Glossary"},{"location":"glossary.html#glossary","text":"","title":"Glossary"},{"location":"glossary.html#0-9","text":"","title":"0-9"},{"location":"glossary.html#a","text":"","title":"A"},{"location":"glossary.html#angle","text":"","title":"angle"},{"location":"glossary.html#b","text":"","title":"B"},{"location":"glossary.html#c","text":"","title":"C"},{"location":"glossary.html#d","text":"","title":"D"},{"location":"glossary.html#degree","text":"","title":"degree"},{"location":"glossary.html#e","text":"","title":"E"},{"location":"glossary.html#f","text":"","title":"F"},{"location":"glossary.html#g","text":"","title":"G"},{"location":"glossary.html#h","text":"","title":"H"},{"location":"glossary.html#i","text":"","title":"I"},{"location":"glossary.html#j","text":"","title":"J"},{"location":"glossary.html#k","text":"","title":"K"},{"location":"glossary.html#l","text":"","title":"L"},{"location":"glossary.html#location","text":"","title":"location"},{"location":"glossary.html#m","text":"","title":"M"},{"location":"glossary.html#n","text":"","title":"N"},{"location":"glossary.html#o","text":"","title":"O"},{"location":"glossary.html#p","text":"","title":"P"},{"location":"glossary.html#q","text":"","title":"Q"},{"location":"glossary.html#r","text":"","title":"R"},{"location":"glossary.html#radian","text":"","title":"radian"},{"location":"glossary.html#s","text":"","title":"S"},{"location":"glossary.html#t","text":"","title":"T"},{"location":"glossary.html#turn","text":"","title":"turn"},{"location":"glossary.html#u","text":"","title":"U"},{"location":"glossary.html#v","text":"","title":"V"},{"location":"glossary.html#w","text":"","title":"W"},{"location":"glossary.html#x","text":"","title":"X"},{"location":"glossary.html#y","text":"","title":"Y"},{"location":"glossary.html#z","text":"","title":"Z"},{"location":"history.html","text":"Release Notes \u00b6 0.1.0 (2020-08-xx) \u00b6 Added the Angle , Latitude , Location , and Longitude classes","title":"Release Notes"},{"location":"history.html#release-notes","text":"","title":"Release Notes"},{"location":"history.html#010-2020-08-xx","text":"Added the Angle , Latitude , Location , and Longitude classes","title":"0.1.0 (2020-08-xx)"},{"location":"install.html","text":"Installation \u00b6 Summary \u00b6 Language Command C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies:\u21b5 dogma: ^0.0.0 Go go get github.com/dogmatists/dogma.go/dogma Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Rust cargo install dogma Zig git clone https://github.com/dogmatists/dogma.zig.git Installing from Git \u00b6 C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart git clone https://github.com/dogmatists/dogma.dart.git Go git clone https://github.com/dogmatists/dogma.go.git Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python git clone https://github.com/dogmatists/dogma.py.git Ruby git clone https://github.com/dogmatists/dogma.rb.git Rust git clone https://github.com/dogmatists/dogma.rs.git Zig git clone https://github.com/dogmatists/dogma.zig.git","title":"Installation"},{"location":"install.html#installation","text":"","title":"Installation"},{"location":"install.html#summary","text":"Language Command C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart dependencies:\u21b5 dogma: ^0.0.0 Go go get github.com/dogmatists/dogma.go/dogma Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python pip3 install dogma.py Ruby gem install dogma.rb Rust cargo install dogma Zig git clone https://github.com/dogmatists/dogma.zig.git","title":"Summary"},{"location":"install.html#installing-from-git","text":"C git clone https://github.com/dogmatists/dogma.c.git C++ git clone https://github.com/dogmatists/dogma.cpp.git Dart git clone https://github.com/dogmatists/dogma.dart.git Go git clone https://github.com/dogmatists/dogma.go.git Protobuf git clone https://github.com/dogmatists/dogma.pb.git Python git clone https://github.com/dogmatists/dogma.py.git Ruby git clone https://github.com/dogmatists/dogma.rb.git Rust git clone https://github.com/dogmatists/dogma.rs.git Zig git clone https://github.com/dogmatists/dogma.zig.git","title":"Installing from Git"},{"location":"learn.html","text":"Tutorials \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Tutorials"},{"location":"learn.html#tutorials","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque rhoncus nisl eget urna tempus tincidunt. Vivamus porta interdum elit, dictum bibendum odio. Aliquam rutrum dapibus est, eget facilisis ligula congue vitae. Nulla egestas magna urna, vitae vestibulum metus interdum sit amet. Nulla facilisis urna imperdiet eros suscipit, id pharetra augue pulvinar. Pellentesque vitae libero quis erat convallis hendrerit non eget sapien. Phasellus eu sollicitudin leo. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas iaculis dapibus felis, in varius urna mollis quis. Donec luctus tellus eget augue vulputate, id pellentesque nisi eleifend. Duis pretium augue sed tempor egestas. Donec dignissim neque turpis, ac sagittis neque fermentum vel. Duis cursus commodo ligula id finibus. Nullam ut ultrices neque. Fusce lobortis auctor diam, vitae ultricies dolor bibendum eget. Quisque id sem sagittis, faucibus odio sit amet, dignissim enim. Duis tortor sem, malesuada eu cursus nec, ullamcorper non mi. Morbi sagittis risus sed ligula consectetur, eget vulputate justo gravida. Vivamus ultrices, nunc ut mattis ultrices, enim elit elementum orci, id blandit turpis lorem dictum turpis. Donec sed tincidunt ligula. Nam tincidunt eros non quam rutrum, at feugiat ipsum maximus. Sed scelerisque magna felis, et lobortis massa viverra non.","title":"Tutorials"},{"location":"license.html","text":"License \u00b6 The project in its entirety, including all source code as well as this manual, is 100% free and unencumbered public domain software. This is free and unencumbered software released into the public domain. Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means. In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For more information, please refer to http://unlicense.org/","title":"License"},{"location":"license.html#license","text":"The project in its entirety, including all source code as well as this manual, is 100% free and unencumbered public domain software. This is free and unencumbered software released into the public domain. Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means. In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For more information, please refer to http://unlicense.org/","title":"License"},{"location":"start.html","text":"Getting Started \u00b6 Summary \u00b6 Language Code C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart'; Go import \"github.com/dogmatists/dogma.go/dogma\" Protobuf import \"dogma.proto\"; Python import dogma Ruby require 'dogma' Rust extern crate dogma; Zig const dogma = @import(\"dogma\"); Loading the library \u00b6 C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Go import \"github.com/dogmatists/dogma.go/dogma\" Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Rust extern crate dogma ; Zig const dogma = @import ( \"dogma\" ); Checking the library version \u00b6 C printf ( \"Dogma for C %d.%d.%d \\n \" , DOGMA_VERSION_MAJOR , DOGMA_VERSION_MINOR , DOGMA_VERSION_PATCH ); C++ std :: printf ( \"Dogma for C++ %d.%d.%d \\n \" , dogma :: version :: major , dogma :: version :: minor , dogma :: version :: patch ); Dart // TODO Go // TODO Python # TODO Ruby # TODO Rust // TODO Zig // TODO Naming conventions \u00b6","title":"Getting Started"},{"location":"start.html#getting-started","text":"","title":"Getting Started"},{"location":"start.html#summary","text":"Language Code C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart'; Go import \"github.com/dogmatists/dogma.go/dogma\" Protobuf import \"dogma.proto\"; Python import dogma Ruby require 'dogma' Rust extern crate dogma; Zig const dogma = @import(\"dogma\");","title":"Summary"},{"location":"start.html#loading-the-library","text":"C #include <dogma.h> C++ #include <dogma.hpp> Dart import 'package:dogma/dogma.dart' ; Go import \"github.com/dogmatists/dogma.go/dogma\" Protobuf import \"dogma.proto\" ; Python import dogma Ruby require 'dogma' Rust extern crate dogma ; Zig const dogma = @import ( \"dogma\" );","title":"Loading the library"},{"location":"start.html#checking-the-library-version","text":"C printf ( \"Dogma for C %d.%d.%d \\n \" , DOGMA_VERSION_MAJOR , DOGMA_VERSION_MINOR , DOGMA_VERSION_PATCH ); C++ std :: printf ( \"Dogma for C++ %d.%d.%d \\n \" , dogma :: version :: major , dogma :: version :: minor , dogma :: version :: patch ); Dart // TODO Go // TODO Python # TODO Ruby # TODO Rust // TODO Zig // TODO","title":"Checking the library version"},{"location":"start.html#naming-conventions","text":"","title":"Naming conventions"},{"location":"c/index.html","text":"Dogma for C \u00b6 https://dogma.dev Prerequisites \u00b6 C11 compiler (for example, Clang 3.1+ or GCC 4.6+) Installation \u00b6 Installation from Source Code \u00b6 $ git clone https://github.com/dogmatists/dogma.c.git $ cd dogma.c $ sudo make install Examples \u00b6 Including the header file \u00b6 #include <dogma.h> Checking the library version \u00b6 printf ( \"Dogma for C %d.%d.%d \\n \" , DOGMA_VERSION_MAJOR , DOGMA_VERSION_MINOR , DOGMA_VERSION_PATCH ); Miscellaneous examples \u00b6 Reference \u00b6 Constants \u00b6 DOGMA_VERSION_MAJOR DOGMA_VERSION_MINOR DOGMA_VERSION_PATCH Enums \u00b6 Structs \u00b6 Angle Latitude Longitude Functions \u00b6 AngleFromDegrees AngleFromRadians AngleFromTurns AngleToDegrees AngleToRadians AngleToTurns Latitude LatitudeToDegrees Longitude LongitudeToDegrees See Also \u00b6 Dogma for C++ , Dart , Protobuf , Python , Ruby , and Zig .","title":"C"},{"location":"c/index.html#dogma-for-c","text":"https://dogma.dev","title":"Dogma for C"},{"location":"c/index.html#prerequisites","text":"C11 compiler (for example, Clang 3.1+ or GCC 4.6+)","title":"Prerequisites"},{"location":"c/index.html#installation","text":"","title":"Installation"},{"location":"c/index.html#installation-from-source-code","text":"$ git clone https://github.com/dogmatists/dogma.c.git $ cd dogma.c $ sudo make install","title":"Installation from Source Code"},{"location":"c/index.html#examples","text":"","title":"Examples"},{"location":"c/index.html#including-the-header-file","text":"#include <dogma.h>","title":"Including the header file"},{"location":"c/index.html#checking-the-library-version","text":"printf ( \"Dogma for C %d.%d.%d \\n \" , DOGMA_VERSION_MAJOR , DOGMA_VERSION_MINOR , DOGMA_VERSION_PATCH );","title":"Checking the library version"},{"location":"c/index.html#miscellaneous-examples","text":"","title":"Miscellaneous examples"},{"location":"c/index.html#reference","text":"","title":"Reference"},{"location":"c/index.html#constants","text":"DOGMA_VERSION_MAJOR DOGMA_VERSION_MINOR DOGMA_VERSION_PATCH","title":"Constants"},{"location":"c/index.html#enums","text":"","title":"Enums"},{"location":"c/index.html#structs","text":"Angle Latitude Longitude","title":"Structs"},{"location":"c/index.html#functions","text":"AngleFromDegrees AngleFromRadians AngleFromTurns AngleToDegrees AngleToRadians AngleToTurns Latitude LatitudeToDegrees Longitude LongitudeToDegrees","title":"Functions"},{"location":"c/index.html#see-also","text":"Dogma for C++ , Dart , Protobuf , Python , Ruby , and Zig .","title":"See Also"},{"location":"c/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"c/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"c/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"c/CREDITS.html#credits","text":"","title":"Credits"},{"location":"c/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"c/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"cpp/index.html","text":"Dogma for C++ \u00b6 https://dogma.dev Prerequisites \u00b6 C++17 compiler (for example, Clang 5+, GCC 7+, or MSVC 19.14+) Installation \u00b6 Installation from Source Code \u00b6 $ git clone https://github.com/dogmatists/dogma.cpp.git $ cd dogma.cpp $ sudo make install Examples \u00b6 Including the header file \u00b6 #include <dogma.hpp> Checking the library version \u00b6 std :: printf ( \"Dogma for C++ %d.%d.%d \\n \" , dogma :: version :: major , dogma :: version :: minor , dogma :: version :: patch ); Miscellaneous examples \u00b6 Reference \u00b6 Constants \u00b6 dogma::version::major dogma::version::minor dogma::version::patch Enums \u00b6 Classes \u00b6 dogma::Angle dogma::Latitude dogma::Longitude Functions \u00b6 See Also \u00b6 Dogma for C , Dart , Protobuf , Python , Ruby , and Zig .","title":"C++"},{"location":"cpp/index.html#dogma-for-c","text":"https://dogma.dev","title":"Dogma for C++"},{"location":"cpp/index.html#prerequisites","text":"C++17 compiler (for example, Clang 5+, GCC 7+, or MSVC 19.14+)","title":"Prerequisites"},{"location":"cpp/index.html#installation","text":"","title":"Installation"},{"location":"cpp/index.html#installation-from-source-code","text":"$ git clone https://github.com/dogmatists/dogma.cpp.git $ cd dogma.cpp $ sudo make install","title":"Installation from Source Code"},{"location":"cpp/index.html#examples","text":"","title":"Examples"},{"location":"cpp/index.html#including-the-header-file","text":"#include <dogma.hpp>","title":"Including the header file"},{"location":"cpp/index.html#checking-the-library-version","text":"std :: printf ( \"Dogma for C++ %d.%d.%d \\n \" , dogma :: version :: major , dogma :: version :: minor , dogma :: version :: patch );","title":"Checking the library version"},{"location":"cpp/index.html#miscellaneous-examples","text":"","title":"Miscellaneous examples"},{"location":"cpp/index.html#reference","text":"","title":"Reference"},{"location":"cpp/index.html#constants","text":"dogma::version::major dogma::version::minor dogma::version::patch","title":"Constants"},{"location":"cpp/index.html#enums","text":"","title":"Enums"},{"location":"cpp/index.html#classes","text":"dogma::Angle dogma::Latitude dogma::Longitude","title":"Classes"},{"location":"cpp/index.html#functions","text":"","title":"Functions"},{"location":"cpp/index.html#see-also","text":"Dogma for C , Dart , Protobuf , Python , Ruby , and Zig .","title":"See Also"},{"location":"cpp/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"cpp/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"cpp/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"cpp/CREDITS.html#credits","text":"","title":"Credits"},{"location":"cpp/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"cpp/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"dart/index.html","text":"Dogma for Dart \u00b6 https://dogma.dev Prerequisites \u00b6 Dart 2.8+ Installation \u00b6 dependencies : dogma : ^0.0.2 Examples \u00b6 Importing the library \u00b6 import 'package:dogma/dogma.dart' ; Checking the library version \u00b6 Reference \u00b6 Classes \u00b6 Angle Latitude Longitude See Also \u00b6 Dogma for C , C++ , Protobuf , Python , Ruby , and Zig .","title":"Dart"},{"location":"dart/index.html#dogma-for-dart","text":"https://dogma.dev","title":"Dogma for Dart"},{"location":"dart/index.html#prerequisites","text":"Dart 2.8+","title":"Prerequisites"},{"location":"dart/index.html#installation","text":"dependencies : dogma : ^0.0.2","title":"Installation"},{"location":"dart/index.html#examples","text":"","title":"Examples"},{"location":"dart/index.html#importing-the-library","text":"import 'package:dogma/dogma.dart' ;","title":"Importing the library"},{"location":"dart/index.html#checking-the-library-version","text":"","title":"Checking the library version"},{"location":"dart/index.html#reference","text":"","title":"Reference"},{"location":"dart/index.html#classes","text":"Angle Latitude Longitude","title":"Classes"},{"location":"dart/index.html#see-also","text":"Dogma for C , C++ , Protobuf , Python , Ruby , and Zig .","title":"See Also"},{"location":"dart/CHANGELOG.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"dart/CHANGELOG.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"dart/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"dart/CREDITS.html#credits","text":"","title":"Credits"},{"location":"dart/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"dart/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"go/index.html","text":"Dogma for Go \u00b6","title":"Go"},{"location":"go/index.html#dogma-for-go","text":"","title":"Dogma for Go"},{"location":"go/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"go/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"go/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"go/CREDITS.html#credits","text":"","title":"Credits"},{"location":"go/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"go/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"protobuf/index.html","text":"Dogma for Protocol Buffers \u00b6 https://dogma.dev Prerequisites \u00b6 Protocol Buffers 3 Installation \u00b6 $ git clone https://github.com/dogmatists/dogma.pb.git Examples \u00b6 Importing the library \u00b6 import \"dogma.proto\" ; Checking the library version \u00b6 Reference \u00b6 Messages \u00b6 dogma.Angle dogma.Latitude dogma.Longitude See Also \u00b6 Dogma for C , C++ , Dart , Python , Ruby , and Zig .","title":"Protobuf"},{"location":"protobuf/index.html#dogma-for-protocol-buffers","text":"https://dogma.dev","title":"Dogma for Protocol Buffers"},{"location":"protobuf/index.html#prerequisites","text":"Protocol Buffers 3","title":"Prerequisites"},{"location":"protobuf/index.html#installation","text":"$ git clone https://github.com/dogmatists/dogma.pb.git","title":"Installation"},{"location":"protobuf/index.html#examples","text":"","title":"Examples"},{"location":"protobuf/index.html#importing-the-library","text":"import \"dogma.proto\" ;","title":"Importing the library"},{"location":"protobuf/index.html#checking-the-library-version","text":"","title":"Checking the library version"},{"location":"protobuf/index.html#reference","text":"","title":"Reference"},{"location":"protobuf/index.html#messages","text":"dogma.Angle dogma.Latitude dogma.Longitude","title":"Messages"},{"location":"protobuf/index.html#see-also","text":"Dogma for C , C++ , Dart , Python , Ruby , and Zig .","title":"See Also"},{"location":"protobuf/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"protobuf/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"protobuf/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"protobuf/CREDITS.html#credits","text":"","title":"Credits"},{"location":"protobuf/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"protobuf/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"python/index.html","text":"Dogma for Python \u00b6 https://dogma.dev Prerequisites \u00b6 Python 3.6+ Installation \u00b6 $ pip3 install dogma.py Examples \u00b6 Importing the library \u00b6 import dogma Checking the library version \u00b6 Reference \u00b6 Classes \u00b6 dogma.Angle dogma.Latitude dogma.Longitude See Also \u00b6 Dogma for C , C++ , Dart , Protobuf , Ruby , and Zig .","title":"Python"},{"location":"python/index.html#dogma-for-python","text":"https://dogma.dev","title":"Dogma for Python"},{"location":"python/index.html#prerequisites","text":"Python 3.6+","title":"Prerequisites"},{"location":"python/index.html#installation","text":"$ pip3 install dogma.py","title":"Installation"},{"location":"python/index.html#examples","text":"","title":"Examples"},{"location":"python/index.html#importing-the-library","text":"import dogma","title":"Importing the library"},{"location":"python/index.html#checking-the-library-version","text":"","title":"Checking the library version"},{"location":"python/index.html#reference","text":"","title":"Reference"},{"location":"python/index.html#classes","text":"dogma.Angle dogma.Latitude dogma.Longitude","title":"Classes"},{"location":"python/index.html#see-also","text":"Dogma for C , C++ , Dart , Protobuf , Ruby , and Zig .","title":"See Also"},{"location":"python/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"python/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"python/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"python/CREDITS.html#credits","text":"","title":"Credits"},{"location":"python/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"python/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"ruby/index.html","text":"Dogma for Ruby \u00b6 https://dogma.dev Prerequisites \u00b6 Ruby 2.7+ Installation \u00b6 $ gem install dogma.rb Examples \u00b6 Importing the library \u00b6 require 'dogma' Checking the library version \u00b6 Reference \u00b6 Classes \u00b6 Dogma::Angle Dogma::Latitude Dogma::Longitude See Also \u00b6 Dogma for C , C++ , Dart , Protobuf , Python , and Zig .","title":"Ruby"},{"location":"ruby/index.html#dogma-for-ruby","text":"https://dogma.dev","title":"Dogma for Ruby"},{"location":"ruby/index.html#prerequisites","text":"Ruby 2.7+","title":"Prerequisites"},{"location":"ruby/index.html#installation","text":"$ gem install dogma.rb","title":"Installation"},{"location":"ruby/index.html#examples","text":"","title":"Examples"},{"location":"ruby/index.html#importing-the-library","text":"require 'dogma'","title":"Importing the library"},{"location":"ruby/index.html#checking-the-library-version","text":"","title":"Checking the library version"},{"location":"ruby/index.html#reference","text":"","title":"Reference"},{"location":"ruby/index.html#classes","text":"Dogma::Angle Dogma::Latitude Dogma::Longitude","title":"Classes"},{"location":"ruby/index.html#see-also","text":"Dogma for C , C++ , Dart , Protobuf , Python , and Zig .","title":"See Also"},{"location":"ruby/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"ruby/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"ruby/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"ruby/CREDITS.html#credits","text":"","title":"Credits"},{"location":"ruby/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"ruby/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"rust/index.html","text":"Dogma for Rust \u00b6","title":"Rust"},{"location":"rust/index.html#dogma-for-rust","text":"","title":"Dogma for Rust"},{"location":"rust/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"rust/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"rust/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"rust/CREDITS.html#credits","text":"","title":"Credits"},{"location":"rust/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"rust/TODO.html#to-dos","text":"","title":"To-Dos"},{"location":"zig/index.html","text":"Dogma for Zig \u00b6 https://dogma.dev Prerequisites \u00b6 Zig 0.6.0 Installation \u00b6 $ git clone https://github.com/dogmatists/dogma.zig.git Examples \u00b6 Importing the library \u00b6 const dogma = @import ( \"dogma\" ); Checking the library version \u00b6 Reference \u00b6 Structs \u00b6 dogma.Angle dogma.Latitude dogma.Longitude See Also \u00b6 Dogma for C , C++ , Dart , Protobuf , Python , and Ruby .","title":"Zig"},{"location":"zig/index.html#dogma-for-zig","text":"https://dogma.dev","title":"Dogma for Zig"},{"location":"zig/index.html#prerequisites","text":"Zig 0.6.0","title":"Prerequisites"},{"location":"zig/index.html#installation","text":"$ git clone https://github.com/dogmatists/dogma.zig.git","title":"Installation"},{"location":"zig/index.html#examples","text":"","title":"Examples"},{"location":"zig/index.html#importing-the-library","text":"const dogma = @import ( \"dogma\" );","title":"Importing the library"},{"location":"zig/index.html#checking-the-library-version","text":"","title":"Checking the library version"},{"location":"zig/index.html#reference","text":"","title":"Reference"},{"location":"zig/index.html#structs","text":"dogma.Angle dogma.Latitude dogma.Longitude","title":"Structs"},{"location":"zig/index.html#see-also","text":"Dogma for C , C++ , Dart , Protobuf , Python , and Ruby .","title":"See Also"},{"location":"zig/CHANGES.html","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"zig/CHANGES.html#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"zig/CREDITS.html","text":"Credits \u00b6","title":"Credits"},{"location":"zig/CREDITS.html#credits","text":"","title":"Credits"},{"location":"zig/TODO.html","text":"To-Dos \u00b6","title":"To-Dos"},{"location":"zig/TODO.html#to-dos","text":"","title":"To-Dos"}]}